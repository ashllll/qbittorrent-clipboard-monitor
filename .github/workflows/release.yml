name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.9"

jobs:
  test:
    name: Final Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run final tests
      run: |
        pytest tests/ -v \
          --cov=qbittorrent_monitor \
          --cov-fail-under=90

  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
          - os: ubuntu-latest
            platform: linux/arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ashllll/qbittorrent-clipboard-monitor
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ashllll/qbittorrent-clipboard-monitor:${{ steps.meta.outputs.version }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Extract version
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        # 从 CHANGELOG.md 提取当前版本的变更
        if [ -f "docs/guides/CHANGELOG.md" ]; then
          awk -v version="\\[${{ steps.version.outputs.VERSION }}\\]" '
            /^## / {
              if (found) exit;
              if ($0 ~ version) {
                found=1;
                next;
              }
            }
            found && !/^## / { print }
          ' docs/guides/CHANGELOG.md > release_notes.txt
        else
          echo "Automated release for version ${{ steps.version.outputs.VERSION }}" > release_notes.txt
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.txt
        draft: false
        prerelease: false
        files: |
          dist/*
          LICENSE
          README.md
        generate_release_notes: true

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        keep_history: true